{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Card, Button, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js';\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction ProductList() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_PRODUCTS_BY_ID, {\n    variables: {\n      ids: store.get('ids')\n    }\n  });\n  if (loading) return __jsx(\"div\", null, \"Loading...\");\n  if (error) return __jsx(\"div\", null, error.message);\n  return __jsx(React.Fragment, null, __jsx(Card, null, __jsx(ResourceList, {\n    showHeader: true,\n    resourceName: {\n      singular: 'Product',\n      plural: 'Products'\n    },\n    items: data.nodes,\n    renderItem: item => {\n      const media = __jsx(Thumbnail, {\n        source: item.images.edges[0] ? item.images.edges[0].node.originalSrc : '',\n        alt: item.images.edges[0] ? item.images.edges[0].altText : ''\n      });\n\n      const price = item.variants.edges[0].node.price;\n      return __jsx(ResourceList.Item, {\n        id: item.id,\n        media: media,\n        accessibilityLabel: `View details for ${item.title}`\n      }, __jsx(Stack, null, __jsx(Stack.Item, {\n        fill: true\n      }, __jsx(\"h3\", null, __jsx(TextStyle, {\n        variation: \"strong\"\n      }, item.title))), __jsx(Stack.Item, null, __jsx(\"p\", null, \"$\", price))));\n    }\n  })));\n}\n\nexport default ProductList;","map":{"version":3,"sources":["/Users/ashish.ranjan/Downloads/Workspace/Github/product-recommendation/components/ProductList.js"],"names":["gql","useQuery","Card","Button","ResourceList","Stack","TextStyle","Thumbnail","store","GET_PRODUCTS_BY_ID","ProductList","loading","error","data","variables","ids","get","message","singular","plural","nodes","item","media","images","edges","node","originalSrc","altText","price","variants","id","title"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,YAAvB,EAAqCC,KAArC,EAA4CC,SAA5C,EAAuDC,SAAvD,QAAwE,kBAAxE;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,MAAMC,kBAAkB,GAAGT,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA1BA;;AA4BA,SAASU,WAAT,GAAuB;AAErB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BZ,QAAQ,CAACQ,kBAAD,EAAqB;AAAEK,IAAAA,SAAS,EAAE;AAAEC,MAAAA,GAAG,EAAEP,KAAK,CAACQ,GAAN,CAAU,KAAV;AAAP;AAAb,GAArB,CAAzC;AAGA,MAAIL,OAAJ,EAAa,OAAO,gCAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,mBAAMA,KAAK,CAACK,OAAZ,CAAP;AAEX,SACE,4BACE,MAAC,IAAD,QACE,MAAC,YAAD;AACE,IAAA,UAAU,MADZ;AAEE,IAAA,YAAY,EAAE;AAAEC,MAAAA,QAAQ,EAAE,SAAZ;AAAuBC,MAAAA,MAAM,EAAE;AAA/B,KAFhB;AAGE,IAAA,KAAK,EAAEN,IAAI,CAACO,KAHd;AAIE,IAAA,UAAU,EAAEC,IAAI,IAAI;AAClB,YAAMC,KAAK,GACT,MAAC,SAAD;AACE,QAAA,MAAM,EACJD,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,IAAuBH,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,EAAqBC,IAArB,CAA0BC,WAAjD,GAA+D,EAFnE;AAIE,QAAA,GAAG,EACDL,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,IAAuBH,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,EAAqBG,OAA5C,GAAsD;AAL1D,QADF;;AAUA,YAAMC,KAAK,GAAGP,IAAI,CAACQ,QAAL,CAAcL,KAAd,CAAoB,CAApB,EAAuBC,IAAvB,CAA4BG,KAA1C;AACA,aACE,MAAC,YAAD,CAAc,IAAd;AACE,QAAA,EAAE,EAAEP,IAAI,CAACS,EADX;AAEE,QAAA,KAAK,EAAER,KAFT;AAGE,QAAA,kBAAkB,EAAG,oBAAmBD,IAAI,CAACU,KAAM;AAHrD,SAKE,MAAC,KAAD,QACE,MAAC,KAAD,CAAO,IAAP;AAAY,QAAA,IAAI;AAAhB,SACE,kBACE,MAAC,SAAD;AAAW,QAAA,SAAS,EAAC;AAArB,SACGV,IAAI,CAACU,KADR,CADF,CADF,CADF,EAQE,MAAC,KAAD,CAAO,IAAP,QACE,sBAAKH,KAAL,CADF,CARF,CALF,CADF;AAoBD;AApCH,IADF,CADF,CADF;AA4CD;;AAED,eAAelB,WAAf","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Card, Button, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js';\n\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction ProductList() {\n\n  const { loading, error, data } = useQuery(GET_PRODUCTS_BY_ID, { variables: { ids: store.get('ids') } })\n\n\n  if (loading) return <div>Loading...</div>\n  if (error) return <div>{error.message}</div>\n\n  return (\n    <>\n      <Card>\n        <ResourceList\n          showHeader\n          resourceName={{ singular: 'Product', plural: 'Products' }}\n          items={data.nodes}\n          renderItem={item => {\n            const media = (\n              <Thumbnail\n                source={\n                  item.images.edges[0] ? item.images.edges[0].node.originalSrc : ''\n                }\n                alt={\n                  item.images.edges[0] ? item.images.edges[0].altText : ''\n                }\n              />\n            );\n            const price = item.variants.edges[0].node.price;\n            return (\n              <ResourceList.Item\n                id={item.id}\n                media={media}\n                accessibilityLabel={`View details for ${item.title}`}\n              >\n                <Stack>\n                  <Stack.Item fill>\n                    <h3>\n                      <TextStyle variation='strong'>\n                        {item.title}\n                      </TextStyle>\n                    </h3>\n                  </Stack.Item>\n                  <Stack.Item>\n                    <p>${price}</p>\n                  </Stack.Item>\n                </Stack>\n              </ResourceList.Item>\n            )\n          }}\n        />\n      </Card>\n    </>\n  )\n}\n\nexport default ProductList;"]},"metadata":{},"sourceType":"module"}